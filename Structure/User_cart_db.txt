// user database
1. user name
2. user email
3. password





// cart database




// Define the CartItem schema
const cartItemSchema = new Schema({
    productId: { type: Schema.Types.ObjectId, ref: 'Product', required: true },
    quantity: { type: Number, required: true },
    price: { type: Number, required: true },
    dateAdded: { type: Date, default: Date.now },
});

// Define the Cart schema
const cartSchema = new Schema({
    userId: { type: Schema.Types.ObjectId, ref: 'User', required: true },
    items: [cartItemSchema],
    status: { type: String, default: 'active' },
    dateCreated: { type: Date, default: Date.now },
    dateUpdated: { type: Date, default: Date.now },
    sessionId: { type: String },
});

async function addMultipleToCart(userId, products) {
    // Find the active cart for the user
    let cart = await Cart.findOne({ userId, status: 'active' });

    // If no active cart, create a new one
    if (!cart) {
        cart = new Cart({ userId, items: [], status: 'active', sessionId: 'session123' });
    }

    for (const { productId, quantity } of products) {
        // Find the product to get the price
        const product = await Product.findById(productId);
        if (!product) {
            throw new Error(`Product with ID ${productId} not found`);
        }

        // Check if the product is already in the cart
        const existingItem = cart.items.find(item => item.productId.equals(productId));

        if (existingItem) {
            // Update the quantity if the product is already in the cart
            existingItem.quantity += quantity;
            existingItem.price = product.price;
        } else {
            // Add the new product to the cart
            cart.items.push({ productId, quantity, price: product.price });
        }
    }

    // Update the dateUpdated field
    cart.dateUpdated = Date.now();

    // Save the cart
    await cart.save();
}

// Example usage
addMultipleToCart('userId123', [
    { productId: 'productId123', quantity: 2 },
    { productId: 'productId456', quantity: 1 },
])
    .then(() => console.log('Products added to cart'))
    .catch(error => console.error(error));

// Retrieving Cart Information



async function getCart(userId) {
    const cart = await Cart.findOne({ userId, status: 'active' }).populate('items.productId');
    if (!cart) {
        throw new Error('Cart not found');
    }
    return cart;
}

// Example usage
getCart('userId123')
    .then(cart => console.log(cart))
    .catch(error => console.error(error));


// when the cart is commleted and the user hit on the order api then the cart items will be render

